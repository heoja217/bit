<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	
	<context:component-scan base-package="java63.web03.control"/>
	
	<!-- @RequestMapping과 @ExceptionHandler등의 애노테이션을 처리할 객체를 등록. 
	이 선언이 있어야만 @RequestMapping 기능을 완전히 사용할 수 있다.
	
	주의! 
	페이지 컨트롤러에 대하여 @Controller 사용 -->
	<mvc:annotation-driven/>
	
	<!-- 												
	ㅡ요청→  DispatcherServlet ㅡ호출→  ProductListControl
							1) 요청을 처리할 빈을 조회
							2) 요청 핸들러를 찾는다
								└요청에 대해 호출될 메서드
								└@RequestMapping 애노테이션 선언 메서드
							3) 메서드의 파라미터 조사 
							=> 파라미터에 일치하는 값을 찾아서 메서드를 호출할때 넘겨준다.
							4) 호출
							5) 메서드의 리턴 타입 조사 => String -> forwarding
																							?		 ->			?			
	 -->
	<!-- 멀티 파트 형식의 데이터를 처리하고 싶다면, 다음 객체 선언 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">

		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="10000000" />

	</bean>
	
	
</beans>
