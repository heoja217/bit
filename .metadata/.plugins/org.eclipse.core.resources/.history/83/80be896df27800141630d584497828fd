package java63.web03.control;

import java.util.HashMap;

import java63.web03.dao.MemberDao;
import java63.web03.domain.Member;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.SessionAttributes;


/* @SessionAttributes 
 모델에 저장되는 값 중에서 세션에 저장될 객체를 지정한다.
 사용법 : @SessionAttributes({"키", "키", ...})
*/
@Controller
@RequestMapping("/auth")
// 만약 Model loginUser라는 이름으로 값을 저장한다면 
//그 값을 request에 보관하지말고 Session에 보관하라!
@SessionAttributes("loginUser")
public class AuthControl {
	@Autowired MemberDao memberDao;

	@RequestMapping(value="/login", method=RequestMethod.GET)
	public String form(
			@CookieValue(/*required=false/*/defaultValue="") String uid, Model model) throws Exception {
		model.addAttribute("udi", uid);
		return "/auth/LoginForm.jsp";
	}
	
	@RequestMapping(value="/login", method=RequestMethod.POST)
	public String login(
			String uid, 
			String pwd, 
			String save,
			HttpServletResponse response,
			Model model) throws Exception {
		
		if (save != null) { // 쿠키로 아이디 저장
			Cookie cookie = new Cookie("uid", uid);
			cookie.setMaxAge(60 * 60 * 24 * 15);
			response.addCookie(cookie);
		} else {
			Cookie cookie = new Cookie("uid", "");
			cookie.setMaxAge(0); // 무효화시킴
			response.addCookie(cookie);
		}

		HashMap<String,String> params = new HashMap<>();
		params.put("userId", uid);
		params.put("password", pwd);
		Member member = memberDao.existUser(params);

		if (member != null) {
			session.setAttribute("loginUser", member);
			if (session.getAttribute("requestUrl") != null) {
				return "redirect:" + 
						(String)session.getAttribute("requestUrl");
			} else {
				return "redirect:../product/list.do";
			}

		} else {
			session.invalidate(); // 세션을 제거하고 새로 만든다.
			return "redirect:login.do"; //로그인 폼으로 보낸다.
		}
	}
	
	@RequestMapping("/logout")
	public String logout(HttpSession session) throws Exception {
    session.invalidate();
    return "redirect:login.do";
  }

}












